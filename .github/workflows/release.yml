name: goreleaser

on:
  pull_request:
  push:

permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Set up Go
        uses: actions/setup-go@v5

      - name: Setup GPG and import private key
        run: |
          # Ensure .gnupg directory exists and has correct permissions
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg

          # Configure the *existing* gpg-agent to use a dummy pinentry-program
          # This prevents gpg from looking for a graphical or interactive prompt
          echo "pinentry-program /usr/bin/true" > ~/.gnupg/gpg-agent.conf
          chmod 600 ~/.gnupg/gpg-agent.conf

          # Set GPG_TTY for the current shell (optional, but good practice for non-interactive)
          # This helps gpg commands in this shell context to behave non-interactively
          echo "GPG_TTY=$(tty)" >> $GITHUB_ENV

          # Import the private key into the existing gpg-agent's keyring
          # The GPG_PASSPHRASE env var will be picked up by the gpg-agent via this step's env
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --yes --import

          # Refresh the agent's cache after import
          # This might not be strictly necessary, but can help ensure the agent knows about the new key
          gpg-connect-agent reloadagent /bye

          # List secret keys to verify import (optional, for debugging)
          gpg --list-secret-keys --fingerprint
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE_SECRET }}

      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          # 'latest', 'nightly', or a semver
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          API_VERSION: 1A
          GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}
